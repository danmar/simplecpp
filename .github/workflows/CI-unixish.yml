name: CI-unixish

on: [push, pull_request]

permissions:
  contents: read

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, macos-13, macos-14, macos-15]
        compiler: [clang++]
        include:
          - os: ubuntu-22.04
            compiler: g++
          - os: ubuntu-24.04
            compiler: g++
      fail-fast: false

    runs-on: ${{ matrix.os }}

    env:
      CXX: ${{ matrix.compiler }}

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false

    # the man-db trigger causes package installations to stall for several minutes at times. so just drop the package.
    # see https://github.com/actions/runner/issues/4030
    - name: Remove man-db package on ubuntu
      if: matrix.os == 'ubuntu-24.04'
      run: |
        sudo apt-get update
        sudo apt-get remove man-db

    - name: Install missing software on ubuntu
      if: matrix.os == 'ubuntu-24.04'
      run: |
          sudo apt-get update
          sudo apt-get install valgrind

    # llvm contains llvm-profdata
    - name: Install missing software on ubuntu (clang++)
      if: contains(matrix.os, 'ubuntu') && matrix.compiler == 'clang++'
      run: |
        sudo apt-get update
        sudo apt-get install libc++-dev llvm

      # coreutils contains "nproc"
    - name: Install missing software on macos
      if: contains(matrix.os, 'macos')
      run: |
        brew install coreutils

    - name: Install missing Python packages
      run: |
        python3 -m pip config set global.break-system-packages true
        python3 -m pip install pytest

    - name: make simplecpp
      run: make -j$(nproc) CXXOPTS="-Werror"

    - name: make test
      run: make -j$(nproc) test CXXOPTS="-Werror"

    - name: selfcheck
      run: |
        make -j$(nproc) selfcheck

    - name: make testrunner (c++17)
      run: |
        make clean
        make -j$(nproc) testrunner CXXOPTS="-std=c++17"

    - name: make testrunner (c++20)
      run: |
        make clean
        make -j$(nproc) testrunner CXXOPTS="-std=c++20"

    - name: Run CMake
      run: |
        cmake -S . -B cmake.output -Werror=dev --warn-uninitialized -DCMAKE_COMPILE_WARNING_AS_ERROR=On

    - name: CMake simplecpp
      run: |
        cmake --build cmake.output --target simplecpp -- -j $(nproc)

    - name: CMake testrunner
      run: |
        cmake --build cmake.output --target testrunner -- -j $(nproc)
        ./cmake.output/testrunner
        # Re-run tests from within the build directory to validate that
        # SIMPLECPP_TEST_SOURCE_DIR is correctly defined and resolved
        (cd cmake.output && ./testrunner)

    - name: Run valgrind
      if: matrix.os == 'ubuntu-24.04'
      run: |
          make clean
          make -j$(nproc) CXXOPTS="-O1"
          valgrind --leak-check=full --num-callers=50 --show-reachable=yes --track-origins=yes --gen-suppressions=all --error-exitcode=42 ./testrunner
          # TODO: run Python tests with valgrind
          VALGRIND_TOOL=memcheck ./selfcheck.sh

    - name: Run with libstdc++ debug mode
      if: matrix.os == 'ubuntu-24.04' && matrix.compiler == 'g++'
      run: |
        make clean
        make -j$(nproc) test selfcheck CXXOPTS="-Werror -g3 -D_GLIBCXX_DEBUG"

    - name: Run with libc++ hardening mode
      if: matrix.os == 'ubuntu-24.04' && matrix.compiler == 'clang++'
      run: |
        make clean
        make -j$(nproc) test selfcheck CXXOPTS="-Werror -stdlib=libc++ -g3 -D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG" LDOPTS="-lc++"

    - name: Run AddressSanitizer
      if: matrix.os == 'ubuntu-24.04'
      run: |
        make clean
        make -j$(nproc) test selfcheck CXXOPTS="-Werror -O2 -g3 -fsanitize=address" LDOPTS="-fsanitize=address"
      env:
        ASAN_OPTIONS: detect_stack_use_after_return=1

    - name: Run UndefinedBehaviorSanitizer
      if: matrix.os == 'ubuntu-24.04'
      run: |
        make clean
        make -j$(nproc) test selfcheck CXXOPTS="-Werror -O2 -g3 -fsanitize=undefined -fno-sanitize=signed-integer-overflow" LDOPTS="-fsanitize=undefined -fno-sanitize=signed-integer-overflow"
      env:
        UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1:report_error_type=1

    # TODO: requires instrumented libc++
    - name: Run MemorySanitizer
      if: false && matrix.os == 'ubuntu-24.04' && matrix.compiler == 'clang++'
      run: |
        make clean
        make -j$(nproc) test selfcheck CXXOPTS="-Werror -O2 -g3 -stdlib=libc++ -fsanitize=memory" LDOPTS="-lc++ -fsanitize=memory"

    - name: Run callgrind
      if: matrix.os == 'ubuntu-24.04'
      run: |
        wget https://github.com/danmar/simplecpp/archive/refs/tags/1.5.1.tar.gz
        tar xvf 1.5.1.tar.gz
        rm -f 1.5.1.tar.gz
        
        make clean
        # TODO: we could also use -O3 but that causes a performance regression with GCC
        make -j$(nproc) CXXOPTS="-O2 -g3 -flto" LDOPTS="-flto" simplecpp
        VALGRIND_TOOL=callgrind SIMPLECPP_PATH=simplecpp-1.5.1 ./selfcheck.sh >callgrind.log || (cat callgrind.log && false)
        cat callgrind.log
        
        # PGO - start
        make clean
        make -j$(nproc) CXXOPTS="-O2 -g3 -fprofile-generate" LDOPTS="-fprofile-generate" simplecpp
        SIMPLECPP_PATH=simplecpp-1.5.1 ./selfcheck.sh >/dev/null
        
        if compgen -G "default_*.profraw" > /dev/null; then
          llvm-profdata merge -output=default.profdata default_*.profraw
        fi
        
        make clean
        make -j$(nproc) CXXOPTS="-O2 -g3 -fprofile-use" LDOPTS="-fprofile-use" simplecpp
        VALGRIND_TOOL=callgrind SIMPLECPP_PATH=simplecpp-1.5.1 ./selfcheck.sh >callgrind_pgo.log || (cat callgrind_pgo.log && false)
        cat callgrind_pgo.log
        # PGO - end
        
        for f in callgrind.out.*;
        do
          callgrind_annotate --auto=no $f > $f.annotated.log
          head -50 $f.annotated.log
        done
        rm -rf simplecpp-1.5.1

    - uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-24.04'
      with:
        name: Callgrind Output - ${{ matrix.compiler }}
        path: |
          ./callgrind.*
